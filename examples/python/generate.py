"""
  This generates bindings for the ggml library using cffi and .pyi stubs for the Python bindings. 
"""

import cffi
import subprocess
import re
import os
import sys
from pathlib import Path
from stubs_generator import generate_stubs

def __write_text(p: Path, s: str):
  with p.open('wt') as f:
    return f.write(s)

def __get_list_flag(n):
    v = os.environ.get(n)
    return [] if v is None else v.split(' ')

header_file = 'api.h'
include_dir = Path('.') / '..' / '..' / '..' / 'llama.cpp'
ggml_package = 'ggml'
debug = os.environ.get('DEBUG', '0') == '1'

CC = os.environ.get('CC') or 'gcc'
CPPFLAGS = __get_list_flag('CPPFLAGS') + [
    "-I", include_dir.as_posix(),
    '-D__fp16=uint16_t',  # pycparser doesn't support __fp16
    '-Ddeprecated(x)=',
    '-D__attribute__(x)=',
    '-Dstatic_assert(x, m)=',
]

try: header = subprocess.run([CC, "-E", *CPPFLAGS, header_file], capture_output=True, text=True, check=True).stdout
except subprocess.CalledProcessError as e: print(f'{e.stderr}\n{e}', file=sys.stderr); raise

# Remove exotic annotations / calls that pycparser (which powers cffi) doesn't like.
header = '\n'.join([l for l in header.split('\n') if '__darwin_va_list' not in l])
# Replace constant size expressions w/ their value (we compile & run a mini exe for each, because why not).
# First, extract anyting *inside* square brackets and anything that looks like a sizeof call.
for expr in set(re.findall(f'(?<=\\[)[^\\]]+(?=])|sizeof\\s*\\([^()]+\\)', header)):
    if re.match(r'^(\d+|\s*)$', expr): continue # skip constants and empty brackets    
    subprocess.run([CC, "-o", "eval_size_expr", *CPPFLAGS, "-x", "c", "-"], text=True, check=True,
                   input=f'''
                     #include <stdio.h>
                     #include "{header_file}"
                     int main() {{ printf("%lu", (size_t)({expr})); }}
                   ''')
    size = subprocess.run(["./eval_size_expr"], capture_output=True, text=True, check=True).stdout
    print(f'constexpr {expr} = {size}')
    header = header.replace(expr, size)

__write_text(Path(ggml_package) / '__init__.pyi', '\n'.join([
    '#',
    '# AUTOGENERATED STUB FILE, DO NOT EDIT',
    '# TO REGENERATE, RUN:',
    '#',
    '#     python generate.py',
    '#',
    f'import {ggml_package}.ffi as ffi',
    '',
    '# ggml library (cffi bindings)',
    generate_stubs(header),
]))

ffibuilder = cffi.FFI()
ffibuilder.cdef(header, override=True)

mode = os.environ.get('MODE', 'dynamic_load')
    
ffibuilder.set_source(f'{ggml_package}.cffi', None)
ffibuilder.compile(verbose=True)
print(f'Generated {ggml_package}.cffi!')