#
# Generates a .pyi Python stub file for the GGML API using C header files.
#
# The idea is to remove comments, then unbreak functions declared across multiple lines,
# the pseudo-parse the function name, return type, args and their types. Simple yet efficient.

import re
from sys import argv

def read_text(p):
  with open(p, 'rt') as f:
    return f.read()

def write_text(p, s):
  with open(p, 'wt') as f:
    return f.write(s)

def to_type(t):
  t = t.strip()
  if t.endswith('*'):
    return '_ffi.CData'
  elif t.startswith('struct '):
    return '_ffi.CData'
  elif t.startswith('enum ') or t in ['int', 'int64_t', 'size_t', 'int32_t', 'int16_t', 'int8_t', 'uint64_t', 'uint32_t', 'uint16_t', 'uint8_t']:
    return 'int'
  elif t in ['float', 'double']:
    return 'float'
  elif t == 'void':
    return 'None'
  elif t == 'bool':
    return 'bool'
  print('## Unknown type:', t)
  return None

def format_arg(t, n):
  t = to_type(t)
  if t is None:
    return n
  return f'{n}: {t}'

def format_ret(t):
  t = to_type(t)
  if t is None:
    return ''
  return f' -> {t}'

def generate_stubs(in_files: list[str]):
  original_header = '\n'.join([read_text(f) for f in in_files])
  header = original_header

  # Remove comments and ~ensure each GGML_API function is on a single line
  header = re.sub(r'/\*.*?\*/', '', header, flags=re.M | re.S)
  header = re.sub(r'//.*([\n\r])', '\\1', header)
  header = re.sub('([(,])\\s*[\\n\\r]\\s*', r'\1', header, flags=re.M | re.S)
  header = re.sub(r'[ \t]+', ' ', header)
  header = re.sub(r'\(\s*void\s*\)', '()', header)

  apis = list(set([l.strip() for l in header.splitlines() if 'GGML_API' in l and 'GGML_DEPRECATED' not in l]))
  apis.sort()

  lib = ['class lib:']
  for api in apis:
    m = re.search(r'GGML_API\s*(.*?)\b(\w+)\s*\(([^)]*)\)\s*;', api)
    if m is not None:
      try:
        (rettype, name, arglist) = m.groups()
        arglist = [a.strip() for a in arglist.split(',')]
        
        args = []
        for arg in arglist:
          if arg.strip() == '':
            continue
          if arg == '...':
            args.append('*args')
          else:
            am = re.search(r'^(.+?)\b(\w+)$', arg)
            args.append(format_arg(am.group(1), am.group(2)))
          
        lib += [
          f'  # {api}', 
          f'  def {name}({", ".join(args)}){format_ret(rettype)}: ...',
          ''
        ]
      except:
        print('## Error parsing:', api)
        raise
  return '\n'.join(lib)

if __name__ == '__main__':
  if len(argv) <= 3:
    print('Usage: python generate_stubs.py <header1> <header2>...')
    exit(1)

  write_text('ggml/__init__.pyi', f'''#
#Â AUTOGENERATED FILE, DO NOT EDIT
# TO REGENERATE, RUN:
#
#     python3 generate_stubs.py {' '.join(argv[1:])}
#
import ggml.ffi as _ffi

# ggml library
{generate_stubs(argv[1:])}
''')